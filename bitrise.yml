---
format_version: '13'
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ios

trigger_map:
- push_branch: main
  pipeline: build_then_test
- pull_request_source_branch: "*"
  pipeline: build_then_test

app:
  envs:
  - BITRISE_PROJECT_PATH: Backyard Birds.xcodeproj
  - BITRISE_SCHEME: Backyard Birds
  - BITRISE_DISTRIBUTION_METHOD: development

meta:
  bitrise.io:
    stack: osx-xcode-15.3.x
    machine_type_id: g2-m1.8core


pipelines:
  build_then_test:
    stages:
    - build_for_testing: {}
    - test: {}
stages:
  build_for_testing:
    workflows:
    - build_for_testing: {}
  test:
    workflows:
    - ui_test: {}
    - unit_test: {}

workflows:
  _clone:
    summary: Create an IPA file to install your app on a device or share it with your
      team.
    description: The workflow will first clone your Git repository, cache and install
      your project's dependencies if any, export an IPA file from the project and
      save it.
    steps:
    - activate-ssh-key@4: {}
    - git-clone@8: {}

  _get_bundle:
    summary: Build your Xcode project.
    description: The workflow will first clone your Git repository, cache and install
      your project's dependencies if any and build your project.
    before_run: []
    steps:
    - pull-intermediate-files@1: {}

  _setup_codesigning:
    summary: Create an IPA file to install your app on a device or share it with your
      team.
    description: The workflow will first clone your Git repository, cache and install
      your project's dependencies if any, export an IPA file from the project and
      save it.
    steps:
    - certificate-and-profile-installer@1: {}
    - script@1:
        inputs:
        - script_file_path:
        - content: envman add --key EXPORT_OPTIONS --value "$(cat Configuration/export_options.plist)"
        title: Make export options available

  run_tests:
    summary: Runs unit tests
    description: The workflow will first clone your Git repository, download cached dependencies, and run your unit tests.
    steps:
    - activate-ssh-key@4: {}
    - git-clone@8: {}
    - restore-spm-cache@2: {}
    - xcode-test@5:
        inputs:
        - xcodebuild_options:
        - test_plan: UnitTests
    - save-spm-cache@1: {}
    - deploy-to-bitrise-io@2: {}

  archive_and_export_app:
    summary: Create an IPA file to install your app on a device or share it with your
      team.
    description: The workflow will first clone your Git repository, cache and install
      your project's dependencies if any, export an IPA file from the project and
      save it.
    steps:
    - xcode-archive@5:
        inputs:
        - project_path: $BITRISE_PROJECT_PATH
        - scheme: $BITRISE_SCHEME
        - distribution_method: $BITRISE_DISTRIBUTION_METHOD
        - verbose_log: 'yes'
        - export_options_plist_content: $EXPORT_OPTIONS
    - deploy-to-bitrise-io@2: {}
    before_run:
    - _clone
    - _setup_codesigning
    meta:
      bitrise.io:
        stack: osx-xcode-15.4.x
        machine_type_id: g2-m1-max.10core

  build_for_testing:
    summary: Create a test bundle
    description: Creates a test bundle for use in test-without-building.
    steps:
    - xcode-build-for-test@3:
        inputs:
        - apple_team_id:
        - destination: generic/platform=iOS Simulator
        - xcodebuild_options: CODE_SIGNING_ALLOWED=NO
    - deploy-to-bitrise-io@2:
        inputs:
        - pipeline_intermediate_files: "$BITRISE_TEST_BUNDLE_PATH:BITRISE_TEST_BUNDLE_PATH"
    meta:
      bitrise.io:
        stack: osx-xcode-15.4.x
        machine_type_id: g2-m1-max.10core
    before_run:
    - _clone
    meta:
      bitrise.io:
        stack: osx-xcode-15.4.x
        machine_type_id: g2-m1-max.10core

  ui_test:
    summary: Runs UI test plan.
    description: Runs UI test plan.
    steps:
    - xcode-test-without-building@0:
        inputs:
        - xcodebuild_options: "-parallel-testing-worker-count 3 -parallel-testing-enabled
            YES"
        - destination: platform=iOS Simulator,name=iPhone 15,OS=17.5
        - xctestrun: "$BITRISE_TEST_BUNDLE_PATH/Backyard Birds_UITests_iphonesimulator17.5-arm64-x86_64.xctestrun"
    - deploy-to-bitrise-io@2: {}
    before_run:
    - _get_bundle

  unit_test:
    summary: Build your Xcode project.
    description: The workflow will first clone your Git repository, cache and install
      your project's dependencies if any and build your project.
    steps:
    - xcode-test-without-building@0:
        inputs:
        - xcodebuild_options:
        - xctestrun: "$BITRISE_TEST_BUNDLE_PATH/Backyard Birds_UnitTests_iphonesimulator17.5-arm64-x86_64.xctestrun"
        - destination: platform=iOS Simulator,name=iPhone 15,OS=17.5
    - deploy-to-bitrise-io@2: {}
    before_run:
    - _get_bundle

  xctestresults_html_report:
    steps:
    - activate-ssh-key@4: {}
    - git-clone@8: {}
    - xcode-test@5:
        inputs:
        - xcodebuild_options:
        - test_plan: UnitTests
    - script@1:
        title: Generate xclogparser HTML report
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            brew install xclogparser
            xclogparser parse --project 'Backyard_Birds' --reporter html --rootOutput "$BITRISE_HTML_REPORT_DIR/xclogparser/"
    - script@1:
        title: Generate xclogparser chromeTracer report
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            brew install xclogparser
            
            # chrome://tracing
            xclogparser parse --project 'Backyard_Birds' --reporter chromeTracer > "$BITRISE_DEPLOY_DIR/trace.json"
    - deploy-to-bitrise-io@2: {}

  remote_test_env:
    summary: Start a remote test environment
    description: |
      To start a remote test environment, run a build on bitrise.io with this workflow, with remote access enabled.

      Steps:
      1. Start a build on bitrise.io with this workflow, and as soon as it starts click `Abort`.
      2. Click `Rebuild with remote access`.
      3. Once the build starts you'll see the details on the build's page about how you can access the remote environment.
    steps:
    - activate-ssh-key@4: {}
    - git-clone@8: {}
    - xcode-test@5:
        inputs:
        - xcodebuild_options:
        - test_plan: UnitTests
    - script@1:
        title: Sleep for 1 hour
        inputs:
        - content: |
            #!/bin/bash
            set -ex
            sleep 3600